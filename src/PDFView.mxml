<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   mouseWheel="windowedapplication1_mouseWheelHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.jankuester.pdfviewer.core.graphics.PageRenderer;
			import com.jankuester.pdfviewer.core.model.pages.PageNode;
			import com.jankuester.pdfviewer.core.pdfloader.PDFLoader;
			
			import mx.events.FlexEvent;
			
			protected var currentPage:int = 1;
			protected var loader:PDFLoader;
			
			protected var _currentRenderer:PageRenderer;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				maximize();
				loader = new PDFLoader();
				loader.addEventListener(PDFLoader.LOAD_COMPLETE, onLoadComplete);
				loader.prepare("assets/lorem.pdf");
				loader.loadFile();
				
			}

			protected function onLoadComplete(event:Event):void
			{
				renderPage();
			}
			
			protected function updatePageLabel():void
			{
				currentPageInput.text =  String(currentPage);
				maxPages.text =" /"+String(loader.pages);
			}
			
			private function renderPage():void
			{
				updatePageLabel();
				var pageDef:PageNode = loader.getPageAt(currentPage-1);
				page.width = pageDef.mediaBox.w;
				page.height= pageDef.mediaBox.h;
				pageDef.loadContents();
				pageDef.loadResources();
				_currentRenderer = new PageRenderer();
				_currentRenderer.prepare(pageDef.contents, pageDef.resources, page.height);
				page.addElement(_currentRenderer);
			}
			
			protected function next_clickHandler(event:MouseEvent):void
			{
				if(currentPage == loader.pages)return;
				currentPage++;
				cleanPage();
				renderPage();
			}
			
			protected function prev_clickHandler(event:MouseEvent):void
			{
				if(currentPage == 1)return;
				currentPage--;
				cleanPage();
				renderPage();
			}
			
			protected function cleanPage():void
			{
				page.removeAllElements();
				_currentRenderer.dispose();
			}
			
			protected function zoomin_clickHandler(event:MouseEvent):void
			{
				zoom(0.2);
			}
			
			protected function zoomout_clickHandler(event:MouseEvent):void
			{
				zoom(-0.2);
			}
			
			protected function windowedapplication1_mouseWheelHandler(event:MouseEvent):void
			{
				var delta:Number = event.delta/10;
				zoom(delta);
			}
			
			protected function zoom(delta:Number):void
			{
				if (delta > 0 && (page.scaleX > 5 || page.scaleY > 5 || page.scaleX + delta > 5 || page.scaleY + delta > 5))
				{
					page.scaleX = 5;
					page.scaleY = 5;
					return;
				}
				if (delta < 0 && (page.scaleX < 0.2 || page.scaleY < 0.2 || page.scaleX + delta < 0.2 || page.scaleY + delta < 0.2))
				{
					page.scaleX = 0.2;
					page.scaleY = 0.2;
					return;
				}
				
				page.scaleX += delta; 
				page.scaleY += delta;
			}
			
			protected function currentPageInput_focusOutHandler(event:FocusEvent):void
			{
				currentPageInputHandler();
			}
			
			protected function currentPageInput_keyDownHandler(event:KeyboardEvent):void
			{
				currentPageInputHandler();
			}
			
			protected function currentPageInputHandler():void
			{
				var targetPage:int = int(currentPageInput.text);
				if (targetPage < 1 || targetPage > loader.pages || targetPage == currentPage)
				{
					currentPageInput.text = String(currentPage);
					return;
				}
				setPageByInput(targetPage);
			}
			
			protected function setPageByInput(targetPage:int):void
			{
				currentPage = targetPage;
				cleanPage();
				renderPage();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Platzieren Sie nichtvisuelle Elemente (z.Â B. Dienste, Wertobjekte) hier -->
	</fx:Declarations>
	
	<!-- BACKGROUND -->
	<s:Group width="100%" height="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x4a4a4a"/>
			</s:fill>
		</s:Rect>	
	</s:Group>
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="top">
		
		
		<!-- NAVIGATION BAR -->
		<s:Group id="navBG" width="100%" height="36">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0x3a3a3a"/>
				</s:fill>
			</s:Rect>
			<s:HGroup id="navBar" width="100%" height="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5">
				<s:Button id="prev" label="prev" width="50" click="prev_clickHandler(event)"/>
				<s:Button id="next" label="next" width="50" click="next_clickHandler(event)"/>
				<s:Spacer width="10" />
				<s:Label text="Page" color="0xa4a4a4" />
				<s:TextInput id="currentPageInput" width="50" textAlign="right" focusOut="currentPageInput_focusOutHandler(event)" keyDown="currentPageInput_keyDownHandler(event)" />
				<s:Label id="maxPages"  color="0xa4a4a4"/>
				<s:Spacer width="100%" />
				<s:Button id="zoomin" label="+"  width="28" click="zoomin_clickHandler(event)"/>
				<s:Button id="zoomout" label="-" width="28" click="zoomout_clickHandler(event)"/>
			</s:HGroup>
		</s:Group>
			
		<s:HGroup width="100%" height="100%" id="contentContainer" horizontalAlign="center" clipAndEnableScrolling="true">
			
			<!-- ACTUAL PAGE -->
			<s:HGroup id="pageContainer"  horizontalAlign="center" width="100%">
				<s:Group id="pageBG">
					<s:Rect width="100%" height="100%">
						<s:fill>
							<s:SolidColor color="0xFFFFFF"/>
						</s:fill>
						<s:filters>
							<s:DropShadowFilter angle="0" blurX="16" blurY="16" color="0x000000"
												distance="0" strength="1"/>
						</s:filters>
					</s:Rect>
					<s:Group id="page" />
				</s:Group>
			</s:HGroup>
			<s:VScrollBar height="100%" viewport="{this.contentContainer}" />
		</s:HGroup>

		
		<s:HScrollBar width="100%" viewport="{this.pageContainer}" />
	</s:VGroup>
	
</s:WindowedApplication>
